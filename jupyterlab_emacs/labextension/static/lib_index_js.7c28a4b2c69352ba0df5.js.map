{"version":3,"file":"lib_index_js.7c28a4b2c69352ba0df5.js","mappings":"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","sources":["webpack://@axlair/jupyterlab_vim/./src/codemirrorCommands.ts","webpack://@axlair/jupyterlab_vim/./src/index.ts","webpack://@axlair/jupyterlab_vim/./src/labCommands.ts"],"sourcesContent":["import { Cell, ICellModel, MarkdownCell } from '@jupyterlab/cells';\nimport { CodeMirrorEditor } from '@jupyterlab/codemirror';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IEditorTracker, FileEditor } from '@jupyterlab/fileeditor';\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\nimport type { CodeEditor } from '@jupyterlab/codeeditor';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Vim, getCM, CodeMirror } from '@replit/codemirror-vim';\n\n// It may be worth contributing types for these upstream\ninterface IVimCodeMirror extends CodeMirror {\n  moveByLines: undefined;\n  moveByDisplayLines: undefined;\n  moveByScroll: undefined;\n  moveToColumn: undefined;\n  moveToEol: undefined;\n}\n\nexport interface IKeybinding {\n  command: string;\n  keys: string;\n  context: string;\n  mapfn: string;\n  enabled: boolean;\n}\n\nexport namespace VimEditorManager {\n  export interface IOptions {\n    enabled: boolean;\n    userKeybindings: IKeybinding[];\n  }\n}\n\nexport namespace VimCellManager {\n  export interface IOptions extends VimEditorManager.IOptions {\n    commands: CommandRegistry;\n  }\n}\n\ninterface IUndoOptions {\n  repeat: number;\n  repeatIsExplicit: boolean;\n  registerName: unknown;\n}\n\nexport interface ICellContext {\n  index?: number;\n  cellCount?: number;\n}\n\nexport class VimEditorManager {\n  constructor({ enabled, userKeybindings }: VimEditorManager.IOptions) {\n    this.enabled = enabled;\n    this.userKeybindings = userKeybindings ?? [];\n  }\n\n  async onActiveEditorChanged(\n    tracker: IEditorTracker,\n    activeEditor: IDocumentWidget<FileEditor> | null\n  ): Promise<void> {\n    if (!activeEditor) {\n      return;\n    }\n    await activeEditor.content.ready;\n    this.modifyEditor(activeEditor.content.editor);\n  }\n\n  updateLastActive() {\n    if (!this._lastActiveEditor) {\n      return;\n    }\n    this.modifyEditor(this._lastActiveEditor);\n  }\n\n  /**\n   * Hook up vim mode into given editor.\n   * Returns true if vim mode was enabled.\n   */\n  modifyEditor(editor: CodeEditor.IEditor | null): boolean {\n    if (!editor) {\n      throw Error('Editor not available');\n    }\n    // JupyterLab 4.0 only supports CodeMirror editors\n    const mirrorEditor = editor as CodeMirrorEditor;\n\n    this._lastActiveEditor = mirrorEditor;\n\n    const view = mirrorEditor.editor;\n\n    if (this.enabled) {\n      if (!mirrorEditor.getOption('vim')) {\n        // this erases state, we do not want to call it if not needed.\n        mirrorEditor.setOption('vim', true);\n\n        // On each key press the notebook (`Notebook.handleEvent`) invokes\n        // a handler ensuring focus (`Notebook._ensureFocus`); the logic does\n        // not work well for the `ex commands` panel which is always interpreted\n        // as blurred because it exists outside of the CodeMirror6 state; here\n        // we override `hasFocus` handler to ensure it is taken into account.\n        const cm = getCM(view)!;\n        cm.on('vim-mode-change', () => {\n          if (!cm.state.vim) {\n            throw Error('CodeMirror vim state not available');\n            return;\n          }\n          editor.host.dataset.jpVimModeName = cm.state.vim.mode;\n        });\n        mirrorEditor.hasFocus = () => {\n          if (\n            cm.state.dialog &&\n            cm.state.dialog.contains(document.activeElement)\n          ) {\n            return true;\n          }\n          return view.hasFocus;\n        };\n      }\n\n      // Override vim-mode undo/redo to make it work with JupyterLab RTC-aware\n      // history; it needs to happen on every change of the editor.\n      Vim.defineAction('undo', (cm: CodeMirror, options: IUndoOptions) => {\n        for (let i = 0; i < options.repeat; i++) {\n          editor!.undo();\n        }\n      });\n      Vim.defineAction('redo', (cm: CodeMirror, options: IUndoOptions) => {\n        for (let i = 0; i < options.repeat; i++) {\n          editor!.redo();\n        }\n      });\n\n      const lcm = getCM(view);\n\n      // Clear existing user keybindings, then re-register in case they changed in the user settings\n      ['normal', 'visual', 'insert'].forEach(ctx => Vim.mapclear(ctx));\n      this.userKeybindings.forEach(\n        ({\n          command,\n          keys,\n          context,\n          mapfn,\n          enabled: keybindEnabled\n        }: IKeybinding) => {\n          if (keybindEnabled) {\n            if (mapfn === 'map') {\n              Vim.map(command, keys, context);\n            } else {\n              Vim.noremap(command, keys, context);\n            }\n          }\n        }\n      );\n\n      Vim.handleKey(lcm, '<Esc>');\n\n      return true;\n    } else if (mirrorEditor.getOption('vim')) {\n      mirrorEditor.setOption('vim', false);\n      return false;\n    }\n    return false;\n  }\n\n  private _lastActiveEditor: CodeEditor.IEditor | null = null;\n  public enabled: boolean;\n  public userKeybindings: IKeybinding[];\n}\n\nexport class VimCellManager extends VimEditorManager {\n  constructor({ commands, enabled, userKeybindings }: VimCellManager.IOptions) {\n    super({ userKeybindings, enabled });\n    this._commands = commands;\n  }\n\n  onActiveCellChanged(\n    tracker: INotebookTracker,\n    activeCell: Cell<ICellModel> | null\n  ): void {\n    const activeCellContext = {\n      index: tracker.currentWidget?.content.activeCellIndex,\n      cellCount: tracker.currentWidget?.content.widgets.length\n    } as ICellContext;\n    this.modifyCell(activeCell, activeCellContext).catch(console.error);\n  }\n\n  updateLastActive() {\n    if (!this._lastActiveCell || !this._lastActiveCellContext) {\n      return;\n    }\n    this.modifyCell(this._lastActiveCell, this._lastActiveCellContext);\n  }\n\n  async modifyCell(\n    activeCell: Cell<ICellModel> | null,\n    activeCellContext: ICellContext\n  ): Promise<void> {\n    if (!activeCell || !activeCellContext) {\n      return;\n    }\n    this._lastActiveCell = activeCell;\n    this._lastActiveCellContext = activeCellContext;\n    await activeCell.ready;\n\n    if (activeCell.isDisposed) {\n      console.warn('Cell was already disposed, cannot setup vim mode');\n      return;\n    }\n    const wasEnabled = this.modifyEditor(activeCell.editor);\n    if (wasEnabled) {\n      this._modifyEdgeNavigation(activeCell, activeCellContext);\n    }\n  }\n\n  private _modifyEdgeNavigation(\n    activeCell: Cell<ICellModel>,\n    activeCellContext: ICellContext\n  ) {\n    // Define a function to use as Vim motion\n    // This replaces the codemirror moveByLines function to\n    // for jumping between notebook cells.\n    const moveByLinesOrCell = (\n      cm: IVimCodeMirror,\n      head: any,\n      motionArgs: any,\n      vim: any\n    ): any => {\n      const cur = head;\n      let endCh = cur.ch;\n      const currentCell = activeCell;\n      // TODO: these references will be undefined\n      // Depending what our last motion was, we may want to do different\n      // things. If our last motion was moving vertically, we want to\n      // preserve the HPos from our last horizontal move.  If our last motion\n      // was going to the end of a line, moving vertically we should go to\n      // the end of the line, etc.\n      switch (vim?.lastMotion) {\n        case cm.moveByLines:\n        case cm.moveByDisplayLines:\n        case cm.moveByScroll:\n        case cm.moveToColumn:\n        case cm.moveToEol:\n        // JUPYTER PATCH: add our custom method to the motion cases\n        // eslint-disable-next-line no-fallthrough\n        case moveByLinesOrCell:\n          endCh = vim.lastHPos;\n          break;\n        default:\n          vim.lastHPos = endCh;\n      }\n      const repeat = motionArgs.repeat + (motionArgs.repeatOffset || 0);\n      let line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n      const first = cm.firstLine();\n      const last = cm.lastLine();\n      const posV = cm.findPosV(\n        cur,\n        motionArgs.forward ? repeat : -repeat,\n        'line',\n        vim.lastHSPos\n      );\n      const hasMarkedText = motionArgs.forward\n        ? posV.line > line\n        : posV.line < line;\n      if (hasMarkedText) {\n        line = posV.line;\n        endCh = posV.ch;\n      }\n\n      // JUPYTER PATCH BEGIN\n      // here we insert the jumps to the next cells\n\n      if (line < first || line > last) {\n        // var currentCell = ns.notebook.get_selected_cell();\n        // var currentCell = tracker.activeCell;\n        // var key = '';\n        // `currentCell !== null should not be needed since `activeCell`\n        // is already check against null (row 61). Added to avoid warning.\n        if (\n          currentCell !== null &&\n          currentCell.model.type === 'markdown' &&\n          !(!motionArgs.forward && activeCellContext.index === 0)\n        ) {\n          if (!motionArgs.handleArrow) {\n            // markdown cells tends to improperly handle arrow keys movement,\n            //  on the way up the cell is rendered, but down movement is ignored\n            //  when use arrows the cell will remain unrendered (need to shift+enter)\n            //  However, this is the same as Jupyter default behaviour\n            (currentCell as MarkdownCell).rendered = true;\n          }\n          // currentCell.execute();\n        }\n        if (motionArgs.forward) {\n          // ns.notebook.select_next();\n          if (!motionArgs.handleArrow) {\n            this._commands.execute('notebook:move-cursor-down');\n          } else {\n            // This block preventing double cell hop when you use arrow keys for navigation\n            //    also arrow key navigation works properly when current cursor position\n            //    at the beginning of line for up move, and at the end for down move\n            const cursor = cm.getCursor();\n            // CM6 is 1-based\n            const last_char = cm.cm6.state.doc.line(last + 1).length;\n            if (cursor.line !== last || cursor.ch !== last_char) {\n              cm.setCursor(last, last_char);\n              this._commands.execute('notebook:move-cursor-down');\n            }\n          }\n          // key = 'j';\n        } else {\n          // ns.notebook.select_prev();\n          if (!motionArgs.handleArrow) {\n            this._commands.execute('notebook:move-cursor-up');\n          } else {\n            // This block preventing double cell hop when you use arrow keys for navigation\n            //    also arrow key navigation works properly when current cursor position\n            //    at the beginning of line for up move, and at the end for down move\n            const cursor = cm.getCursor();\n            if (cursor.line !== 0 || cursor.ch !== 0) {\n              cm.setCursor(0, 0);\n              this._commands.execute('notebook:move-cursor-up');\n            }\n          }\n          // key = 'k';\n        }\n        return;\n      }\n      // JUPYTER PATCH END\n\n      // function taken from https://github.com/codemirror/CodeMirror/blob/9d0f9d19de70abe817e8b8e161034fbd3f907030/keymap/vim.js#L3328\n      function findFirstNonWhiteSpaceCharacter(text: any): number {\n        if (!text) {\n          return 0;\n        }\n        const firstNonWS = text.search(/\\S/);\n        return firstNonWS === -1 ? text.length : firstNonWS;\n      }\n\n      if (motionArgs.toFirstChar) {\n        endCh = findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n        vim.lastHPos = endCh;\n      }\n\n      vim.lastHSPos = cm.charCoords(\n        new CodeMirror.Pos(line, endCh),\n        'div'\n      ).left;\n      return new CodeMirror.Pos(line, endCh);\n    };\n    Vim.defineMotion('moveByLinesOrCell', moveByLinesOrCell);\n\n    Vim.mapCommand(\n      '<Up>',\n      'motion',\n      'moveByLinesOrCell',\n      { forward: false, linewise: true, handleArrow: true },\n      { context: 'normal' }\n    );\n    Vim.mapCommand(\n      '<Down>',\n      'motion',\n      'moveByLinesOrCell',\n      { forward: true, linewise: true, handleArrow: true },\n      { context: 'normal' }\n    );\n    Vim.mapCommand(\n      'k',\n      'motion',\n      'moveByLinesOrCell',\n      { forward: false, linewise: true },\n      { context: 'normal' }\n    );\n    Vim.mapCommand(\n      'j',\n      'motion',\n      'moveByLinesOrCell',\n      { forward: true, linewise: true },\n      { context: 'normal' }\n    );\n\n    Vim.defineAction('moveCellDown', (cm: any, actionArgs: any) => {\n      this._commands.execute('notebook:move-cell-down');\n    });\n    Vim.defineAction('moveCellUp', (cm: any, actionArgs: any) => {\n      this._commands.execute('notebook:move-cell-up');\n    });\n    Vim.mapCommand('<C-e>', 'action', 'moveCellDown', {}, { extra: 'normal' });\n    Vim.mapCommand('<C-y>', 'action', 'moveCellUp', {}, { extra: 'normal' });\n    Vim.defineAction('splitCell', (cm: any, actionArgs: any) => {\n      this._commands.execute('notebook:split-cell-at-cursor');\n    });\n    Vim.mapCommand('-', 'action', 'splitCell', {}, { extra: 'normal' });\n  }\n\n  private _commands: CommandRegistry;\n  private _lastActiveCell: Cell<ICellModel> | null = null;\n  private _lastActiveCellContext: ICellContext | undefined;\n}\n","import {\n  ILabShell,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\n\nimport {\n  IEditorExtensionRegistry,\n  EditorExtensionRegistry\n} from '@jupyterlab/codemirror';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IDisposable } from '@lumino/disposable';\nimport { vim, Vim } from '@replit/codemirror-vim';\nimport { EditorView } from '@codemirror/view';\nimport { Prec } from '@codemirror/state';\n\nimport {\n  VimEditorManager,\n  VimCellManager,\n  IKeybinding,\n  ICellContext\n} from './codemirrorCommands';\nimport { addNotebookCommands } from './labCommands';\nimport { PartialJSONObject } from '@lumino/coreutils';\n\nconst PLUGIN_NAME = '@axlair/jupyterlab_vim';\nconst TOGGLE_ID = 'jupyterlab-vim:toggle';\nlet enabled = false;\nlet enabledInEditors = true;\nlet escToCmdMode = true;\nlet shiftEscOverrideBrowser = true;\n\n/**\n * Initialization data for the jupyterlab_vim extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_NAME,\n  autoStart: true,\n  activate: activateCellVim,\n  requires: [INotebookTracker, IEditorExtensionRegistry, ISettingRegistry],\n  optional: [IEditorTracker]\n};\n\nasync function activateCellVim(\n  app: JupyterFrontEnd,\n  notebookTracker: INotebookTracker,\n  editorExtensionRegistry: IEditorExtensionRegistry,\n  settingRegistry: ISettingRegistry,\n  editorTracker: IEditorTracker\n): Promise<void> {\n  const theme = Prec.highest(\n    EditorView.theme({\n      '.cm-fat-cursor': {\n        position: 'absolute',\n        background: 'var(--jp-vim-cursor-color)',\n        border: 'none',\n        whiteSpace: 'pre'\n      },\n      '&:not(.cm-focused) .cm-fat-cursor': {\n        background: 'none',\n        outline: 'solid 1px var(--jp-vim-cursor-color)',\n        color: 'transparent !important'\n      }\n    })\n  );\n\n  editorExtensionRegistry.addExtension({\n    name: 'vim',\n    factory: options => {\n      return EditorExtensionRegistry.createConditionalExtension([\n        theme,\n        vim({\n          status: false\n        })\n      ]);\n    }\n  });\n\n  app.commands.addCommand(TOGGLE_ID, {\n    label: 'Enable Vim Mode',\n    execute: () => {\n      if (settingRegistry) {\n        void settingRegistry.set(`${PLUGIN_NAME}:plugin`, 'enabled', !enabled);\n      }\n    },\n    isToggled: () => enabled\n  });\n\n  app.commands.addCommand('vim:enter-normal-mode', {\n    label: 'Enter Normal Vim Mode',\n    execute: () => {\n      const current = app.shell.currentWidget;\n      if (!current) {\n        console.warn('Current widget not found');\n      } else if (editorTracker.currentWidget === current) {\n        editorManager.modifyEditor(editorTracker.currentWidget.content.editor);\n      } else if (notebookTracker.currentWidget === current) {\n        const activeCellContext = {\n          index: notebookTracker.currentWidget.content.activeCellIndex,\n          cellCount: notebookTracker.currentWidget.content.widgets.length\n        } as ICellContext;\n        cellManager.modifyCell(\n          notebookTracker.currentWidget.content.activeCell,\n          activeCellContext\n        );\n      } else {\n        console.warn('Current widget is not vim-enabled');\n      }\n    },\n    isEnabled: () => enabled\n  });\n\n  const userKeybindings = (\n    await settingRegistry.get(`${PLUGIN_NAME}:plugin`, 'extraKeybindings')\n  ).composite as unknown as Array<IKeybinding>;\n\n  const cellManager = new VimCellManager({\n    commands: app.commands,\n    enabled,\n    userKeybindings\n  });\n  const editorManager = new VimEditorManager({\n    enabled: enabled && enabledInEditors,\n    userKeybindings\n  });\n\n  let escBinding: IDisposable | null = null;\n  let hasEverBeenEnabled = false;\n\n  Vim.defineEx('write', 'w', () => {\n    app.commands.execute('docmanager:save');\n  });\n\n  Vim.defineEx('quit', 'q', () => {\n    // In JupyterLab 4.0 needs to be executed after vim panel has closed, here\n    // achived by moving it to end of execution stack with `setTimeout()`.\n    setTimeout(() => {\n      app.commands.execute('notebook:enter-command-mode');\n    });\n  });\n\n  // it's ok to connect here because we will never reach the vim section unless\n  // ensureVimKeyMap has been called due to the checks for enabled.\n  // we need to have now in order to keep track of the last active cell\n  // so that we can modify it when vim is turned on or off.\n  notebookTracker.activeCellChanged.connect(\n    cellManager.onActiveCellChanged,\n    cellManager\n  );\n  editorTracker.currentChanged.connect(\n    editorManager.onActiveEditorChanged,\n    editorManager\n  );\n  const shell = app.shell as ILabShell;\n  shell.currentChanged.connect(() => {\n    const current = shell.currentWidget;\n    if (!current) {\n      // no-op\n    } else if (editorTracker.currentWidget === current) {\n      editorManager.modifyEditor(editorTracker.currentWidget.content.editor);\n    } else if (notebookTracker.currentWidget === current) {\n      const activeCellContext = {\n        index: notebookTracker.currentWidget.content.activeCellIndex,\n        cellCount: notebookTracker.currentWidget.content.widgets.length\n      } as ICellContext;\n      cellManager.modifyCell(\n        notebookTracker.currentWidget.content.activeCell,\n        activeCellContext\n      );\n    } else {\n      // no-op\n    }\n  });\n\n  addNotebookCommands(app, notebookTracker);\n\n  async function updateSettings(\n    settings: ISettingRegistry.ISettings\n  ): Promise<void> {\n    const userKeybindings = (\n      await settingRegistry.get(`${PLUGIN_NAME}:plugin`, 'extraKeybindings')\n    ).composite as unknown as Array<IKeybinding>;\n\n    enabled = settings.get('enabled').composite === true;\n    enabledInEditors = settings.get('enabledInEditors').composite === true;\n\n    const cmdModeKeys = settings.get('cmdModeKeys')\n      .composite as PartialJSONObject;\n    if (!cmdModeKeys) {\n      // no-op\n    } else {\n      escToCmdMode = cmdModeKeys['escToCmdMode'] as boolean;\n      shiftEscOverrideBrowser = cmdModeKeys[\n        'shiftEscOverrideBrowser'\n      ] as boolean;\n    }\n\n    app.commands.notifyCommandChanged(TOGGLE_ID);\n\n    cellManager.enabled = enabled;\n    cellManager.userKeybindings = userKeybindings;\n\n    editorManager.enabled = enabled && enabledInEditors;\n    editorManager.userKeybindings = userKeybindings;\n\n    if (enabled) {\n      escBinding?.dispose();\n      if (!hasEverBeenEnabled) {\n        hasEverBeenEnabled = true;\n        await app.restored;\n      }\n    } else {\n      escBinding = app.commands.addKeyBinding({\n        command: 'notebook:enter-command-mode',\n        keys: ['Escape'],\n        selector: '.jp-Notebook.jp-mod-editMode'\n      });\n    }\n\n    notebookTracker.forEach(notebook => {\n      notebook.node.dataset.jpVimMode = `${enabled}`;\n      notebook.node.dataset.jpVimEscToCmdMode = `${escToCmdMode}`;\n      notebook.node.dataset.jpVimShiftEscOverrideBrowser = `${shiftEscOverrideBrowser}`;\n    });\n    editorTracker.forEach(document => {\n      document.node.dataset.jpVimMode = `${enabled && enabledInEditors}`;\n    });\n    editorManager?.updateLastActive();\n    cellManager?.updateLastActive();\n\n    // make sure our css selector is added to new notebooks\n    notebookTracker.widgetAdded.connect((sender, notebook) => {\n      notebook.node.dataset.jpVimMode = `${enabled}`;\n      notebook.node.dataset.jpVimEscToCmdMode = `${escToCmdMode}`;\n      notebook.node.dataset.jpVimShiftEscOverrideBrowser = `${shiftEscOverrideBrowser}`;\n    });\n    editorTracker.widgetAdded.connect((sender, document) => {\n      document.node.dataset.jpVimMode = `${enabled && enabledInEditors}`;\n    });\n  }\n\n  settingRegistry.load(`${PLUGIN_NAME}:plugin`).then(\n    (settings: ISettingRegistry.ISettings) => {\n      updateSettings(settings);\n      settings.changed.connect(updateSettings);\n    },\n    (err: Error) => {\n      console.error(\n        `Could not load settings, so did not active ${PLUGIN_NAME}: ${err}`\n      );\n    }\n  );\n  return Promise.resolve();\n}\n\nexport default extension;\n","import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { MarkdownCell } from '@jupyterlab/cells';\nimport { Vim, getCM } from '@replit/codemirror-vim';\nimport { CodeMirrorEditor } from '@jupyterlab/codemirror';\nimport {\n  INotebookTracker,\n  NotebookActions,\n  NotebookPanel\n} from '@jupyterlab/notebook';\nimport { ReadonlyPartialJSONObject } from '@lumino/coreutils';\n\nimport { IDisposable } from '@lumino/disposable';\n\nexport function addNotebookCommands(\n  app: JupyterFrontEnd,\n  tracker: INotebookTracker\n): Array<IDisposable> {\n  const { commands, shell } = app;\n  function getCurrent(args: ReadonlyPartialJSONObject): NotebookPanel | null {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n\n    // Should we expose `activeWidget` in `IShell`?\n    // when `activateById` is called the Notebook handler focuses current editor\n    // which leads to bluring the panel for inputing ex commands and may render\n    // the use of ex commands impossible if called needlesly.\n    if (activate && widget && shell.currentWidget !== widget) {\n      shell.activateById(widget.id);\n    }\n\n    return widget;\n  }\n  function isEnabled(): boolean {\n    return (\n      tracker.currentWidget !== null &&\n      tracker.currentWidget === app.shell.currentWidget\n    );\n  }\n  const addedCommands = [\n    commands.addCommand('vim:run-select-next-edit', {\n      label: 'Run Cell and Edit Next Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { context, content } = current;\n          NotebookActions.runAndAdvance(content, context.sessionContext);\n          current.content.mode = 'edit';\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:run-cell-and-edit', {\n      label: 'Run Cell and Edit Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { context, content } = current;\n          NotebookActions.run(content, context.sessionContext);\n          // Don't re-enter edit mode for markdown cells\n          if (\n            content.activeCell !== null &&\n            content.activeCell.model.type === 'markdown'\n          ) {\n            // no-op\n          } else {\n            current.content.mode = 'edit';\n          }\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:cut-cell-and-edit', {\n      label: 'Cut Cell(s) and Edit Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          NotebookActions.cut(content);\n          content.mode = 'edit';\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:copy-cell-and-edit', {\n      label: 'Copy Cell(s) and Edit Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          NotebookActions.copy(content);\n          content.mode = 'edit';\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:paste-cell-and-edit', {\n      label: 'Paste Cell(s) and Edit Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          NotebookActions.paste(content, 'below');\n          content.mode = 'edit';\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:merge-and-edit', {\n      label: 'Merge and Edit Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          NotebookActions.mergeCells(content);\n          current.content.mode = 'edit';\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:enter-insert-mode', {\n      label: 'Enter Insert Mode',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          if (content.activeCell !== null) {\n            const editor = content.activeCell.editor as CodeMirrorEditor;\n            current.content.mode = 'edit';\n            const cm = getCM(editor.editor);\n            if (!cm) {\n              console.error('CodeMirror vim wrapper not found');\n              return;\n            }\n            Vim.handleKey(cm, 'i');\n          }\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:leave-insert-mode', {\n      label: 'Leave Insert Mode',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          if (content.activeCell !== null) {\n            const editor = content.activeCell.editor as CodeMirrorEditor;\n            const cm = getCM(editor.editor);\n            if (!cm) {\n              console.error('CodeMirror vim wrapper not found');\n              return;\n            }\n            Vim.handleKey(cm, '<Esc>');\n          }\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:leave-current-mode', {\n      label: 'Move Insert to Normal to Jupyter Command Mode',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          if (content.activeCell !== null) {\n            const editor = content.activeCell.editor as CodeMirrorEditor;\n\n            const cm = getCM(editor.editor);\n            if (!cm) {\n              console.error('CodeMirror vim wrapper not found');\n              return;\n            }\n            const vim = cm.state.vim;\n            if (!vim) {\n              console.error('CodeMirror vim state not found');\n              return;\n            }\n\n            // Get the current editor state\n            if (\n              vim.insertMode ||\n              vim.visualMode ||\n              vim.inputState.operator !== null ||\n              vim.inputState.motion !== null ||\n              vim.inputState.keyBuffer.length !== 0\n            ) {\n              Vim.handleKey(cm, '<Esc>');\n            } else {\n              commands.execute('notebook:enter-command-mode');\n            }\n          }\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:select-below-execute-markdown', {\n      label: 'Execute Markdown and Select Cell Below',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          if (\n            content.activeCell !== null &&\n            content.activeCell.model.type === 'markdown'\n          ) {\n            (current.content.activeCell as MarkdownCell).rendered = true;\n          }\n          return NotebookActions.selectBelow(current.content);\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:select-above-execute-markdown', {\n      label: 'Execute Markdown and Select Cell Above',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          if (\n            content.activeCell !== null &&\n            content.activeCell.model.type === 'markdown' &&\n            content.activeCellIndex !== 0\n          ) {\n            (current.content.activeCell as MarkdownCell).rendered = true;\n          }\n          return NotebookActions.selectAbove(current.content);\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:select-first-cell', {\n      label: 'Select First Cell',\n      execute: async args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          content.activeCellIndex = 0;\n          content.deselectAll();\n          if (content.activeCell !== null) {\n            // note: using `scrollToItem` because `scrollToCell` changes mode (activate the cell)\n            await content.scrollToItem(content.activeCellIndex, 'smart');\n            content.activeCell.node.focus();\n          }\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:select-last-cell', {\n      label: 'Select Last Cell',\n      execute: async args => {\n        const current = getCurrent(args);\n\n        if (current) {\n          const { content } = current;\n          content.activeCellIndex = current.content.widgets.length - 1;\n          content.deselectAll();\n          if (content.activeCell !== null) {\n            // note: using `scrollToItem` because `scrollToCell` changes mode (activates the cell)\n            await content.scrollToItem(content.activeCellIndex, 'smart');\n            content.activeCell.node.focus();\n          }\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:center-cell', {\n      label: 'Center Cell',\n      execute: args => {\n        const current = getCurrent(args);\n\n        if (current && current.content.activeCell !== null) {\n          current.content.scrollToCell(current.content.activeCell, 'center');\n        }\n      },\n      isEnabled\n    }),\n    commands.addCommand('vim:no-action', {\n      label: 'Prevent Default Browser Action',\n      caption:\n        'Prevent default action for some keybindings (defined in the settings); for example Firefox binds Shift + Esc to its Process Manager which conflicts with the expected action in the vim mode.',\n      execute: args => {\n        // no-op\n      }\n    })\n  ];\n  return addedCommands;\n}\n"],"names":[],"sourceRoot":""}